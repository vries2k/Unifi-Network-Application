name: unifi-network-application
services:
  unifi-db:
    container_name: unifi-db
    image: docker.io/mongo:3.6
    configs:
      - source: init-mongo.js
        target: /docker-entrypoint-initdb.d/init-mongo.js
    environment:
      - PGID=0
      - PUID=998
      - TZ=Europe/Amsterdam
    ports:
      - target: 27017
        published: "27017"
        protocol: tcp
    restart: unless-stopped
    volumes:
      - type: bind
        source: /config/mongodb/unifi-db
        target: /data/db
    networks:
     - unifi-bridge
    privileged: false


  unifi-network-application:
    container_name: unifi-network-application
    depends_on:
      unifi-db:
        condition: service_started
        required: true
    environment:
      - MONGO_DBNAME=unifi-db
      - MONGO_HOST=unifi-db
      - MONGO_PASS=pass
      - MONGO_PORT=27017
      - MONGO_USER=unifi
      - PGID=1000
      - PUID=1000
      - TZ=Etc/UTC
    image: lscr.io/linuxserver/unifi-network-application:latest
    ports:
      - "4478:3478/udp"   # STUN
      - "10001:10001/udp" # Device discovery
      - "9080:8080"       # HTTP portal redirection
      - "7443:8443"       # HTTPS web interface
      - "1914:1900/udp"   # UPnP
      - "7553:8843"       # HTTPS guest portal
      - "9880:8880"       # HTTP guest portal
      - "6789:6789"       # Speed test server
      - "5514:5514/udp"   # Syslog
    restart: unless-stopped
    volumes:
      - type: bind
        source: /config/unifi-network-application
        target: /config
    networks:
     - unifi-bridge
    privileged: false

networks:
  unifi-bridge:
    driver: bridge

configs:
  init-mongo.js:
    content: |
      db.getSiblingDB("unifi-db").createUser({user: "unifi", pwd: "pass", roles: [{role: "dbOwner", db: "unifi-db"}]}); 
      db.getSiblingDB("unifi-db_stat").createUser({user: "unifi", pwd: "pass", roles: [{role: "dbOwner", db: "unifi-db_stat"}]});
